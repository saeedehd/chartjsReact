import React, { Component } from 'react';
import { Chart, Bar } from 'react-chartjs-2';


class App extends Component {
 constructor(props){
   super(props);
   this.state = {
     data: {
       labels: ["1", "2", "3", "4", "5"],
       datasets: [
         {
           label: "videos Mades",
           backgroundColor: "rgba(255,0,255,0.75)",
           data: [10, 25, 13, 5, 30, 7, 2]
         }
       ]
     }
   }
 } 

 render() {
   return (
    <div style={{ position: "relative", width: 600, height: 550}}>
      <h3>Chart Sample</h3>
      <Bar
        data={this.state.data}
        plugins= {{
          id: "curvature",
          beforeInit: (chart, _easing) => {
            if (!chart.options.curvature) {
              return;
            }
            chart.elements.Rectangle.prototype.draw = function () {
              const ctx = this._chart.ctx;
              const vm = this._view;

              let left,right, top, bottom, signX, signY, borderSkipped, radius;
              let borderWidth = vm.borderWidth;

              // set Radius Here
              // If the radius is large enough to cause drawing error, a max radius is imposed
              let cornerRadius = chart.option.curvature;
              if (cornerRadius > 20) {
                console.log("Curvature of the rectangle can't be higher than 20.")
                cornerRadius = 20;
              }
              if (!vm.horizontal) {
                // bar is vertical
                left = vm.x - vm.width / 2;
                right = vm.x + vm.width / 2;
                top = vm.y;
                bottom = vm.base;
                signX = 1;
                signY = bottom > top ? 1 : -1;
                borderSkipped = vm.borderSkipped || "bottom";
              } else {
                // bar chart is horizantal
                left = vm.base;
                right = vm.x;
                top = vm.y - vm.height / 2;
                bottom = vm.y + vm.height /2;
                signX = right > left ? 1 : -1;
                signY = 1;
                borderSkipped = vm.borderSkipped || "left";
              }
            }
          }
        }}
      />  
    </div>
   )
 }
}
export default App;
